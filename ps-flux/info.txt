node version: node -v


create react app and start: 
npx create-react-app@3.0.1 ps-flux
PS D:\Data\Vatan\Learnings\AA Authors\CoryHouse\React\CoryHouseReact\ps-flux> npm start

Install flux(3.1.3), react-router-dom(5.0.0) and bootstrap (4.3.1):
npm install flux@3.1.3 react-router-dom@5.0.0 bootstrap@4.3.1

Mock-API:
npm install -D cross-env@5.2.0 npm-run-all@4.1.5 json-server@0.15.0
---------------
"prestart:api": "node tools/createMockDb.js", :
The mock data creater.

"start:api": "node tools/apiServer.js", :

---------------

npm run start:api

npm start:
"start": "run-p start:dev start:api",

----------------------------------------
fetch and env vars:

fetch to make api call, and .then() is call when async call is complete.
fetch default is get so no need to specify

create-react-app looks for env vars that start with REACT_APP and allows us to replace their values in code.

---------HTML vs JSX----------
class -> className
for -> htmlFor
camelCased attributes
  - tabindex -> tabIndex

---fun and export--
fun start from Capital letter, lower is assumed as html component.
by default everything in each file is private so we need to export.
---------  Alt+Arrow-------

Moves a line up/down

-------------Props and State--------------
Props:
  Data passed from parent to child
  Looks like html attribute.
  Immutable:
    Want to change then call a fun provided by parent.
State:
  Holds mutable State
  Set via setState in class components./ this.state.username
  useState or useReducer hooks in fun. component./ state.username

--------life-Cycle Methods-----------
LifeCycle
  Mounting:
    constructor
    render
    React updates DOM and refs
    componentDidMount
  Updating:
    New props/setState()/forceUpdate()
    render
    React updates DOM and refs
    componentDidMount
  Unmounting
    componentWillUnmount

----------Demo-LifeCycle-------

{" "} : non breaking space within JSX.
---------------Hooks--------
It make easy to create fun component for almost everything.

Hooks: Only call from function
  useState - Local state
  useEffect - Side useEffect
    componentDidMount +
    componentDidUpdate +
    componentWillUnmount
  useContext - Access data in context

Rules:
  Only call in
    - React function components
    - Custom Hooks
  Hooks must be at  declared top level
    - Don't wrap in if statement, loops , funcs
    - Why? React tracks Hook call order

Calling setCourses causes the compo to re-render, which caused useEffect to re-run.
The dependency array is a list of values that useEffect should watch. It re-runs when values in this array change.

---------------Controller view---------------------------
//Separation of concerns
CoursePage.js:
  CoursePage()

CoursePage.js:
  CoursePage() + CourseList.js:CourseList()

------------------PropTypes-------------------------------
Why: We require PropTypes for validating the props

1. Import proptypes Steps

import PropTypes from "prop-types";

2. define properties for the function we need validation before export.


-------------------------------------------------------
